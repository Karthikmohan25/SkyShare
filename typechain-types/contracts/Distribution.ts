/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DistributionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimMultipleRounds"
      | "claimPayment"
      | "claimed"
      | "currentRound"
      | "depositRent"
      | "distributions"
      | "fSkyToken"
      | "getClaimableAmount"
      | "getContractBalance"
      | "getUnclaimedRounds"
      | "owner"
      | "renounceOwnership"
      | "totalDustAccumulated"
      | "transferOwnership"
      | "withdrawDust"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DistributionCalculated"
      | "DustWithdrawn"
      | "OwnershipTransferred"
      | "PaymentClaimed"
      | "RentDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimMultipleRounds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fSkyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRounds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDustAccumulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDust",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimMultipleRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fSkyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDustAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDust",
    data: BytesLike
  ): Result;
}

export namespace DistributionCalculatedEvent {
  export type InputTuple = [
    round: BigNumberish,
    totalAmount: BigNumberish,
    totalSupply: BigNumberish,
    dust: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    totalAmount: bigint,
    totalSupply: bigint,
    dust: bigint
  ];
  export interface OutputObject {
    round: bigint;
    totalAmount: bigint;
    totalSupply: bigint;
    dust: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DustWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentClaimedEvent {
  export type InputTuple = [
    holder: AddressLike,
    round: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [holder: string, round: bigint, amount: bigint];
  export interface OutputObject {
    holder: string;
    round: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentDepositedEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [depositor: string, amount: bigint, round: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Distribution extends BaseContract {
  connect(runner?: ContractRunner | null): Distribution;
  waitForDeployment(): Promise<this>;

  interface: DistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimMultipleRounds: TypedContractMethod<
    [rounds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimPayment: TypedContractMethod<
    [round: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  currentRound: TypedContractMethod<[], [bigint], "view">;

  depositRent: TypedContractMethod<[], [void], "payable">;

  distributions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        totalSupply: bigint;
        timestamp: bigint;
        dustRemaining: bigint;
      }
    ],
    "view"
  >;

  fSkyToken: TypedContractMethod<[], [string], "view">;

  getClaimableAmount: TypedContractMethod<
    [holder: AddressLike, round: BigNumberish],
    [bigint],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getUnclaimedRounds: TypedContractMethod<
    [holder: AddressLike],
    [bigint[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalDustAccumulated: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawDust: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimMultipleRounds"
  ): TypedContractMethod<[rounds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimPayment"
  ): TypedContractMethod<[round: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositRent"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "distributions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        totalSupply: bigint;
        timestamp: bigint;
        dustRemaining: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fSkyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getClaimableAmount"
  ): TypedContractMethod<
    [holder: AddressLike, round: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnclaimedRounds"
  ): TypedContractMethod<[holder: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalDustAccumulated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawDust"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DistributionCalculated"
  ): TypedContractEvent<
    DistributionCalculatedEvent.InputTuple,
    DistributionCalculatedEvent.OutputTuple,
    DistributionCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "DustWithdrawn"
  ): TypedContractEvent<
    DustWithdrawnEvent.InputTuple,
    DustWithdrawnEvent.OutputTuple,
    DustWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentClaimed"
  ): TypedContractEvent<
    PaymentClaimedEvent.InputTuple,
    PaymentClaimedEvent.OutputTuple,
    PaymentClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RentDeposited"
  ): TypedContractEvent<
    RentDepositedEvent.InputTuple,
    RentDepositedEvent.OutputTuple,
    RentDepositedEvent.OutputObject
  >;

  filters: {
    "DistributionCalculated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      DistributionCalculatedEvent.InputTuple,
      DistributionCalculatedEvent.OutputTuple,
      DistributionCalculatedEvent.OutputObject
    >;
    DistributionCalculated: TypedContractEvent<
      DistributionCalculatedEvent.InputTuple,
      DistributionCalculatedEvent.OutputTuple,
      DistributionCalculatedEvent.OutputObject
    >;

    "DustWithdrawn(address,uint256)": TypedContractEvent<
      DustWithdrawnEvent.InputTuple,
      DustWithdrawnEvent.OutputTuple,
      DustWithdrawnEvent.OutputObject
    >;
    DustWithdrawn: TypedContractEvent<
      DustWithdrawnEvent.InputTuple,
      DustWithdrawnEvent.OutputTuple,
      DustWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentClaimed(address,uint256,uint256)": TypedContractEvent<
      PaymentClaimedEvent.InputTuple,
      PaymentClaimedEvent.OutputTuple,
      PaymentClaimedEvent.OutputObject
    >;
    PaymentClaimed: TypedContractEvent<
      PaymentClaimedEvent.InputTuple,
      PaymentClaimedEvent.OutputTuple,
      PaymentClaimedEvent.OutputObject
    >;

    "RentDeposited(address,uint256,uint256)": TypedContractEvent<
      RentDepositedEvent.InputTuple,
      RentDepositedEvent.OutputTuple,
      RentDepositedEvent.OutputObject
    >;
    RentDeposited: TypedContractEvent<
      RentDepositedEvent.InputTuple,
      RentDepositedEvent.OutputTuple,
      RentDepositedEvent.OutputObject
    >;
  };
}
